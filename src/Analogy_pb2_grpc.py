# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Analogy_pb2 as Analogy__pb2


class AnalogyStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeForPublishingMessages = channel.stream_unary(
                '/greet.Analogy/SubscribeForPublishingMessages',
                request_serializer=Analogy__pb2.AnalogyGRPCLogMessage.SerializeToString,
                response_deserializer=Analogy__pb2.AnalogyMessageReply.FromString,
                )
        self.SubscribeForConsumingMessages = channel.unary_stream(
                '/greet.Analogy/SubscribeForConsumingMessages',
                request_serializer=Analogy__pb2.AnalogyConsumerMessage.SerializeToString,
                response_deserializer=Analogy__pb2.AnalogyGRPCLogMessage.FromString,
                )


class AnalogyServicer(object):
    """The greeting service definition.
    """

    def SubscribeForPublishingMessages(self, request_iterator, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeForConsumingMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalogyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeForPublishingMessages': grpc.stream_unary_rpc_method_handler(
                    servicer.SubscribeForPublishingMessages,
                    request_deserializer=Analogy__pb2.AnalogyGRPCLogMessage.FromString,
                    response_serializer=Analogy__pb2.AnalogyMessageReply.SerializeToString,
            ),
            'SubscribeForConsumingMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeForConsumingMessages,
                    request_deserializer=Analogy__pb2.AnalogyConsumerMessage.FromString,
                    response_serializer=Analogy__pb2.AnalogyGRPCLogMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Analogy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analogy(object):
    """The greeting service definition.
    """

    @staticmethod
    def SubscribeForPublishingMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/greet.Analogy/SubscribeForPublishingMessages',
            Analogy__pb2.AnalogyGRPCLogMessage.SerializeToString,
            Analogy__pb2.AnalogyMessageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeForConsumingMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/greet.Analogy/SubscribeForConsumingMessages',
            Analogy__pb2.AnalogyConsumerMessage.SerializeToString,
            Analogy__pb2.AnalogyGRPCLogMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
